// Write a method that takes in an integer `offset` and a string. Produce a new string, where each letter is shifted by `offset`. 
// You may assume that the string contains only lowercase letters and spaces.

// When shifting "z" by three letters, wrap around to the front of the alphabet to produce the letter "c". You'll want to use 
// String's `ord` method and Integer's `chr` method. `ord` converts a letter to an ASCII number code. `chr` converts an ASCII 
// number code to a letter.

// You may look at the ASCII printable characters chart:
//     http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
// Notice that the letter 'a' has code 97, 'b' has code 98, etc., up to 'z' having code 122.
// You may also want to use the `%` modulo operation to handle wrapping of "z" to the front of the alphabet.

// Difficulty: hard. Because this problem relies on outside information, we would not give it to you on the timed challenge. :-)

function caesar_cipher(offset, string) {
  var arr = [];
  for(var i = 0; i < string.length; i++) {
  	if(string[i].charCodeAt() + offset > 122) {
  		arr.push(String.fromCharCode(string[i].charCodeAt() + offset - 26));
  	} else if(string[i].charCodeAt() >= 97 && string[i].charCodeAt() <= 122) {
      arr.push(String.fromCharCode(string[i].charCodeAt() + offset));
  	} else {
  		arr.push(string[i]);
  	}
  }
  return arr.join("");
}

console.log("===============================================");
    console.log(caesar_cipher(3, 'abc') == 'def');
    console.log(caesar_cipher(3, 'abc xyz') == 'def abc');
console.log("===============================================");
